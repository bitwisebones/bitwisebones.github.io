<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>electronics on ascii graves</title>
    <link>/tags/electronics/</link>
    <description>Recent content in electronics on ascii graves</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Jan 2025 00:00:00 -0400</lastBuildDate><atom:link href="/tags/electronics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Workspace 2025 Part 2: The Switch</title>
      <link>/posts/workspace-2025-part-2/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 -0400</pubDate>
      
      <guid>/posts/workspace-2025-part-2/</guid>
      <description>As discussed in Part 1, I need the ability to switch the inputs on two KVMs and two USB switches that aren&amp;rsquo;t physically on my desk.
Previously, I had a hacked together setup to remotely trigger my single KVM and single USB switch:
The mechanical keyboard switches on the left were wired (via ethernet twisted pairs) to a) the remote for my KVM and b) a jack that I soldered onto the button of the USB switch.</description>
      <content>&lt;p&gt;As discussed in &lt;a href=&#34;/posts/workspace-2025-part-1/&#34;&gt;Part 1&lt;/a&gt;, I need the ability to switch the inputs on two KVMs and two USB switches that aren&amp;rsquo;t physically on my desk.&lt;/p&gt;
&lt;p&gt;Previously, I had a hacked together setup to remotely trigger my single KVM and single USB switch:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./messy-junk.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The mechanical keyboard switches on the left were wired (via ethernet twisted pairs) to a) the remote for my KVM and b) a jack that I soldered onto the button of the USB switch. I used the remote for the KVM because it was provided by work and I didn&amp;rsquo;t want to make any irreversible changes to the hardware.&lt;/p&gt;
&lt;p&gt;This &amp;hellip; could be better.&lt;/p&gt;
&lt;h1 id=&#34;the-new-plan&#34;&gt;The New Plan&lt;/h1&gt;
&lt;p&gt;First, I bought new KVMs that had a wired remote option. They came with a nice button that wires into the KVM via a standard 3.5mm headphone jack. Easy enough.&lt;/p&gt;
&lt;p&gt;Unfortunately, I couldn&amp;rsquo;t find a (cheap) USB switch with the same option, so I had to add the headphone jack myself.&lt;/p&gt;
&lt;p&gt;The USB switch I bought has a nice big button:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./usb-switch-inside.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;and I could pretty easily wire a jack to the bottom pins of that button:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./usb-switch-jack.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Doesn&amp;rsquo;t look too bad from the outside, either:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./usb-switch-jack-complete.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;With that completed (x2), I now had four devices (2x KVM, 2x USB switches) that can be activated using a 3.5mm headphone jack. Time to build something that can activate them all remotely.&lt;/p&gt;
&lt;h1 id=&#34;hardware&#34;&gt;Hardware&lt;/h1&gt;
&lt;p&gt;I had a Pi Pico W on hand that was well suited for the task. I added a 4 channel optoisolater in the mix just to isolate all of the devices from the Pico and from eachother. The schematic is pretty straightforward:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./schematic.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Digital output pins on the Pico are connected to the anodes on each channel of the optoisolator, with the cathodes connected to ground. On the output side, the tip and sleeve of the barrel jack are connected to the collector and emitter (respectively) of the corresponding photodiode.&lt;/p&gt;
&lt;p&gt;When, for example, GPIO18 on the Pico is low, the LED betweens pins 1 and 2 of the LTV-847 is off, and so the circuit between the tip and sleeve of J1 is open.&lt;/p&gt;
&lt;p&gt;When GPIO18 goes high, the LED turns on and activates the photodiode between pins 15 and 16, closing the circuit between the tip and sleeve of J1 and simulating a button press.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what it all looks like on a perfboard:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./perfboard.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I opted to connect the barrel jacks to the perfboard via JST connectors to make assembly easier. As you can see, there&amp;rsquo;s not much to it.&lt;/p&gt;
&lt;p&gt;Slap it all in a 3d printed enclosure, and voil√†:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./enclosure.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I designed the enclosure in FreeCAD. It has four holes in the front for the 3.5mm barrel jacks as well as a cutout in the back for a panel-mount USB cable that gets plugged into the Pico. I used slots and nuts to fasten the perfboard to the enclosure and to attach the lid. This was way nicer than using heat set inserts or something like that.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./enclosure-cad.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;firmware&#34;&gt;Firmware&lt;/h1&gt;
&lt;p&gt;The code running on the Pico is simple as well. It connects to WiFi, then connects to an MQTT broker and listens for messages containing the values &amp;ldquo;1&amp;rdquo;, &amp;ldquo;2&amp;rdquo;, &amp;ldquo;3&amp;rdquo;, or &amp;ldquo;4&amp;rdquo; to indicate which jack to turn on and then off.&lt;/p&gt;
&lt;p&gt;I initially wrote the firmware using Micropython. The development experience was &amp;hellip; ok. Thonny is basically a text editor with basic snytax highlighting, so it leaves a lot to be desired.&lt;/p&gt;
&lt;p&gt;Unfortunately, the support for the Pico W&amp;rsquo;s WiFi module seems to be really flaky in Micropython. I decided to swap over to the Arduino framework, and that&amp;rsquo;s been much more reliable.&lt;/p&gt;
&lt;p&gt;Now I just need a convenient way to send MQTT commands to the switcher &amp;hellip; more on that in Part 3.&lt;/p&gt;
&lt;h1 id=&#34;resources&#34;&gt;Resources&lt;/h1&gt;
&lt;p&gt;The code, enclosure, and schematic are all on &lt;a href=&#34;https://github.com/bitwisebones/switcher&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>NuVu Meter</title>
      <link>/posts/nuvu-meter/</link>
      <pubDate>Thu, 29 Feb 2024 06:00:00 -0500</pubDate>
      
      <guid>/posts/nuvu-meter/</guid>
      <description>I had a few salvaged VU meters burning a hole in my proverbial pocket, so I decided to turn one into a readout for my home&amp;rsquo;s energy usage.
At a high level, I have an Emporia Vue 2 that publishes energy readings to a self-hosted MQTT server (this is not default behavior and required flashing custom config to the device). My self-hosted NodeRed instance listens for those messages, extracts the relevant data, and issues a new message with the total point-in-time energy usage as a percentage of the last day&amp;rsquo;s max usage (it also saves all of the data so I can view it in Grafana).</description>
      <content>&lt;p&gt;I had a few salvaged VU meters burning a hole in my proverbial pocket, so I decided to turn one into a readout for my home&amp;rsquo;s energy usage.&lt;/p&gt;
&lt;p&gt;At a high level, I have an &lt;a href=&#34;https://shop.emporiaenergy.com/products/gen-2-emporia-vue-with-16-sensors-bundle&#34;&gt;Emporia Vue 2&lt;/a&gt; that publishes energy readings to a self-hosted MQTT server (this is not default behavior and required flashing custom config to the device). My self-hosted NodeRed instance listens for those messages, extracts the relevant data, and issues a new message with the total point-in-time energy usage as a percentage of the last day&amp;rsquo;s max usage (it also saves all of the data so I can view it in Grafana). A Raspberry Pi Pico W in the NuVu meter listens for those messages and then changes the needle position and backlight color accordingly.&lt;/p&gt;
&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;exploded-view.webp&#34; alt=&#34;An exploded view of the various pieces of the nuvu meter&#34;&gt;&lt;/p&gt;
&lt;p&gt;The main inspiration for this project was an old VU meter I had scavenged from a tape deck, so that&amp;rsquo;s what dictated the form factor of the final product.&lt;/p&gt;
&lt;p&gt;The electronics are very minimal - a Raspberry Pi Pico W (powered via USB) drives the RGB LED and the VU meter via PWM, and that&amp;rsquo;s all there is to it.&lt;/p&gt;
&lt;p&gt;I chose the Pico W because it was cheap and available. There are plenty of other options in this space that also would&amp;rsquo;ve worked just as well, like the ESP32 or any of the other WiFi dev boards sold by Adafruit or Seeed Studio.&lt;/p&gt;
&lt;p&gt;When designing the case, I wanted something that didn&amp;rsquo;t add too much bulk to the VU meter&amp;rsquo;s footprint. You can&amp;rsquo;t see it too well in the photos, but the coil that moves the needle sits at the bottom center and sticks out the back about 10mm, so that&amp;rsquo;s why the Pico is located in the top half of the enclosure rather than closer to the bottom. I&amp;rsquo;m not entirely happy with how the USB cable sticks out from the middle of the case, but it doesn&amp;rsquo;t pose any functional issues so I&amp;rsquo;ll learn to live with it.&lt;/p&gt;
&lt;p&gt;The mounting hole placement on the Pico is not the greatest. The holes near the USB port are so close to the edge of the PCB that it makes mounting difficult, which is how I ended up with the filler block that just sits on top of the PCB and around the USB port.&lt;/p&gt;
&lt;p&gt;I had also originally planned (and even tried) to use heat set inserts for the holes in the back cover, but I&amp;rsquo;m really bad at installing those so I opted for undersized holes that the screws sort of just self tap. It probably won&amp;rsquo;t hold up to too many disassemble/reassemble operations, but hopefully I won&amp;rsquo;t ever need to take it apart.&lt;/p&gt;
&lt;h2 id=&#34;software&#34;&gt;Software&lt;/h2&gt;
&lt;p&gt;I originally started out using MicroPython to build a prototype and found the fast feedback loop absolutely wonderful. It was especially great for dialing in specific color values or needle positions.&lt;/p&gt;
&lt;p&gt;That said, I wasn&amp;rsquo;t happy with the IDEs that were available, and I also struggled with confidently installing external packages (for MQTT). It seemed very easy for the code running on the device to get out of sync with the code on my host PC&amp;rsquo;s file system.&lt;/p&gt;
&lt;p&gt;I considered a few alternatives and eventually landed on good ol&amp;rsquo; Arduino. It&amp;rsquo;s still not perfect (dependency management seems environmental and not based on a &amp;ldquo;project&amp;rdquo;), but I was more comfortable with the end result.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s only about 100 lines of really straightforward code. The &lt;code&gt;setup&lt;/code&gt; function configures output pins, connects to WiFi, connects to MQTT, and then registers a callback handler that runs when a message is received.&lt;/p&gt;
&lt;p&gt;In response to a message, the callback parses the value received (0-100) and then modifies the needle position and LED color to reflect that value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;parts.webp&#34; alt=&#34;A deconstructed view of the NuVu meter&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The code, enclosure, and schematics are all on &lt;a href=&#34;https://github.com/bitwisebones/nuvu-meter&#34;&gt;Github&lt;/a&gt; in case you want to use them as inspiration for your own project.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
