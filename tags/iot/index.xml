<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iot on ascii graves</title>
    <link>/tags/iot/</link>
    <description>Recent content in iot on ascii graves</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Dec 2024 00:00:00 -0500</lastBuildDate><atom:link href="/tags/iot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shelly H&amp;T Gen3 Integration</title>
      <link>/posts/shelly-ht-gen3/</link>
      <pubDate>Tue, 24 Dec 2024 00:00:00 -0500</pubDate>
      
      <guid>/posts/shelly-ht-gen3/</guid>
      <description>I recently picked up two Shelly H&amp;amp;T Gen3 temperature and humidity sensors to help evaluate temperature differences between a few rooms in the house. I really like products that put me in control - the Shelly sensor is easily configured over wifi without creating an account, and it supports self-hosted MQTT brokers. 10/10, would buy again.
That said, there are some wrinkles. I want to walk through my initial integration and explain the drawbacks.</description>
      <content>&lt;p&gt;I recently picked up two &lt;a href=&#34;https://us.shelly.com/products/shelly-h-t-gen3-matte-black&#34;&gt;Shelly H&amp;amp;T Gen3&lt;/a&gt; temperature and humidity sensors to help evaluate temperature differences between a few rooms in the house. I really like products that put me in control - the Shelly sensor is easily configured over wifi without creating an account, &lt;em&gt;and&lt;/em&gt; it supports self-hosted MQTT brokers. 10/10, would buy again.&lt;/p&gt;
&lt;p&gt;That said, there are some wrinkles. I want to walk through my initial integration and explain the drawbacks. Then we&amp;rsquo;ll look at where I ultimately ended up.&lt;/p&gt;
&lt;h2 id=&#34;initial-attempt&#34;&gt;Initial Attempt&lt;/h2&gt;
&lt;p&gt;My standard pipeline for ingesting metrics via MQTT is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MQTT -&amp;gt; Node-RED -&amp;gt; PostgREST -&amp;gt; Postgres -&amp;gt; Grafana&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This works really well for my Emporia Vue 2 energy monitor as detailed &lt;a href=&#34;http://localhost:1313/posts/selfhosted-2024/#home-energy-monitoring&#34;&gt;here&lt;/a&gt;. In that case, the Vue sends a single message containing all metrics. The Shelly H&amp;amp;T, however, sends distinct messages for temperature and humidity readings (among other things):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./mqtt-messages.png&#34; alt=&#34;A screenshot of MQTTExplorer showing the various messages sent by a Shelly H&amp;amp;T&#34;&gt;&lt;/p&gt;
&lt;p&gt;Having two sensor units also means that there are a total of four MQTT topics that I actually need to listen to, so my Node-RED flow looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./initial-flow.png&#34; alt=&#34;A screenshot of four identical pipelines in a node-red flow&#34;&gt;&lt;/p&gt;
&lt;p&gt;As a consequence, I can&amp;rsquo;t reliably store a given reading for both rooms at the same time. Where my energy metrics table looks like this&amp;hellip;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Timestamp&lt;/th&gt;
&lt;th&gt;Family Room&lt;/th&gt;
&lt;th&gt;Office&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2024-12-24T00:00&lt;/td&gt;
&lt;td&gt;240&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2024-12-24T00:01&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;105&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2024-12-24T00:02&lt;/td&gt;
&lt;td&gt;210&lt;/td&gt;
&lt;td&gt;107&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;hellip;I&amp;rsquo;m forced to store my temperature metrics like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Timestamp&lt;/th&gt;
&lt;th&gt;Temperature&lt;/th&gt;
&lt;th&gt;Room&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2024-12-24T00:01&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;td&gt;Family Room&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2024-12-24T00:01&lt;/td&gt;
&lt;td&gt;77&lt;/td&gt;
&lt;td&gt;Office&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2024-12-24T00:02&lt;/td&gt;
&lt;td&gt;66&lt;/td&gt;
&lt;td&gt;Family Room&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2024-12-24T00:02&lt;/td&gt;
&lt;td&gt;76&lt;/td&gt;
&lt;td&gt;Office&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now you might be thinking, &amp;ldquo;wait, the second option is definitely better!&amp;rdquo;, and in a &amp;ldquo;normal&amp;rdquo; (pun intended) database, you&amp;rsquo;d be right. But that makes building the Grafana dashboards more difficult and also means I need to include two columns in the index (timestamp and room) instead of just one (timestamp).&lt;/p&gt;
&lt;p&gt;And one final gripe - the Shelly H&amp;amp;T only sends out MQTT messages when the temperature or humidity changes by at least 0.5 units (either degrees C or percent, depending on the metric). That&amp;rsquo;s great for saving power, but makes the rate of updates inconsistent between rooms.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./annoying-charts.png&#34; alt=&#34;A chart with inconsistent updates along the x axis&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;second-attempt&#34;&gt;Second Attempt&lt;/h2&gt;
&lt;p&gt;Instead of pushing metrics to PostgREST/Postgres each time a message is received, I decided to store the value in a flow-scoped variable. When a new message is received, it updates the value held in one of the four variables - temp1, humidity1, temp2, humidity2.&lt;/p&gt;
&lt;p&gt;Then, once a minute, a separate pipeline reads the values of those variables and sends the data to PostgREST. This has the potential to introduce a &lt;em&gt;tiny&lt;/em&gt; amount of delay between when a value changes and when the change is actually recorded, but in my testing so far, the values don&amp;rsquo;t change very frequently at all.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the new flow:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./second-flow.png&#34; alt=&#34;A screenshot of a Node-RED flow that&amp;rsquo;s a bit simpler than the last one&#34;&gt;&lt;/p&gt;
&lt;p&gt;With this flow in place, I can now use the same timeseries database structure that I use for energy readings which makes the Grafana dashboard a piece of cake!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./better-charts.png&#34; alt=&#34;A screenshot of a grafana dashboard showing humidity and temperature with even intervals and no gaps&#34;&gt;&lt;/p&gt;
&lt;p&gt;Overall I&amp;rsquo;m happy with my purchase of the Shelly H&amp;amp;T Gen3. It was relatively cheap and fits into my existing infrastructure easily.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>NuVu Meter</title>
      <link>/posts/nuvu-meter/</link>
      <pubDate>Thu, 29 Feb 2024 06:00:00 -0500</pubDate>
      
      <guid>/posts/nuvu-meter/</guid>
      <description>I had a few salvaged VU meters burning a hole in my proverbial pocket, so I decided to turn one into a readout for my home&amp;rsquo;s energy usage.
At a high level, I have an Emporia Vue 2 that publishes energy readings to a self-hosted MQTT server (this is not default behavior and required flashing custom config to the device). My self-hosted NodeRed instance listens for those messages, extracts the relevant data, and issues a new message with the total point-in-time energy usage as a percentage of the last day&amp;rsquo;s max usage (it also saves all of the data so I can view it in Grafana).</description>
      <content>&lt;p&gt;I had a few salvaged VU meters burning a hole in my proverbial pocket, so I decided to turn one into a readout for my home&amp;rsquo;s energy usage.&lt;/p&gt;
&lt;p&gt;At a high level, I have an &lt;a href=&#34;https://shop.emporiaenergy.com/products/gen-2-emporia-vue-with-16-sensors-bundle&#34;&gt;Emporia Vue 2&lt;/a&gt; that publishes energy readings to a self-hosted MQTT server (this is not default behavior and required flashing custom config to the device). My self-hosted NodeRed instance listens for those messages, extracts the relevant data, and issues a new message with the total point-in-time energy usage as a percentage of the last day&amp;rsquo;s max usage (it also saves all of the data so I can view it in Grafana). A Raspberry Pi Pico W in the NuVu meter listens for those messages and then changes the needle position and backlight color accordingly.&lt;/p&gt;
&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;exploded-view.webp&#34; alt=&#34;An exploded view of the various pieces of the nuvu meter&#34;&gt;&lt;/p&gt;
&lt;p&gt;The main inspiration for this project was an old VU meter I had scavenged from a tape deck, so that&amp;rsquo;s what dictated the form factor of the final product.&lt;/p&gt;
&lt;p&gt;The electronics are very minimal - a Raspberry Pi Pico W (powered via USB) drives the RGB LED and the VU meter via PWM, and that&amp;rsquo;s all there is to it.&lt;/p&gt;
&lt;p&gt;I chose the Pico W because it was cheap and available. There are plenty of other options in this space that also would&amp;rsquo;ve worked just as well, like the ESP32 or any of the other WiFi dev boards sold by Adafruit or Seeed Studio.&lt;/p&gt;
&lt;p&gt;When designing the case, I wanted something that didn&amp;rsquo;t add too much bulk to the VU meter&amp;rsquo;s footprint. You can&amp;rsquo;t see it too well in the photos, but the coil that moves the needle sits at the bottom center and sticks out the back about 10mm, so that&amp;rsquo;s why the Pico is located in the top half of the enclosure rather than closer to the bottom. I&amp;rsquo;m not entirely happy with how the USB cable sticks out from the middle of the case, but it doesn&amp;rsquo;t pose any functional issues so I&amp;rsquo;ll learn to live with it.&lt;/p&gt;
&lt;p&gt;The mounting hole placement on the Pico is not the greatest. The holes near the USB port are so close to the edge of the PCB that it makes mounting difficult, which is how I ended up with the filler block that just sits on top of the PCB and around the USB port.&lt;/p&gt;
&lt;p&gt;I had also originally planned (and even tried) to use heat set inserts for the holes in the back cover, but I&amp;rsquo;m really bad at installing those so I opted for undersized holes that the screws sort of just self tap. It probably won&amp;rsquo;t hold up to too many disassemble/reassemble operations, but hopefully I won&amp;rsquo;t ever need to take it apart.&lt;/p&gt;
&lt;h2 id=&#34;software&#34;&gt;Software&lt;/h2&gt;
&lt;p&gt;I originally started out using MicroPython to build a prototype and found the fast feedback loop absolutely wonderful. It was especially great for dialing in specific color values or needle positions.&lt;/p&gt;
&lt;p&gt;That said, I wasn&amp;rsquo;t happy with the IDEs that were available, and I also struggled with confidently installing external packages (for MQTT). It seemed very easy for the code running on the device to get out of sync with the code on my host PC&amp;rsquo;s file system.&lt;/p&gt;
&lt;p&gt;I considered a few alternatives and eventually landed on good ol&amp;rsquo; Arduino. It&amp;rsquo;s still not perfect (dependency management seems environmental and not based on a &amp;ldquo;project&amp;rdquo;), but I was more comfortable with the end result.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s only about 100 lines of really straightforward code. The &lt;code&gt;setup&lt;/code&gt; function configures output pins, connects to WiFi, connects to MQTT, and then registers a callback handler that runs when a message is received.&lt;/p&gt;
&lt;p&gt;In response to a message, the callback parses the value received (0-100) and then modifies the needle position and LED color to reflect that value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;parts.webp&#34; alt=&#34;A deconstructed view of the NuVu meter&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The code, enclosure, and schematics are all on &lt;a href=&#34;https://github.com/bitwisebones/nuvu-meter&#34;&gt;Github&lt;/a&gt; in case you want to use them as inspiration for your own project.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
